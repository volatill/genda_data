[0;32m--------------start------------2021-01-20 00:50:42[0m
[0;32margs:dynamic-ss --algo lazyup --epsilon 0.5 --prefix ./data/ --dataset webstanford --with_idx --baton --beta 1 --query_size 40 --update_size 60 --check_size 0 [0m
action: dynamic-ss
config.epsilon=0.5 
config.version=vector 
config.action=dynamic-ss 
sub constructor 
init graph n: 281904 m: 2312497
load graph finish 
access(prefix.c_str()=0 
finished initing parameters 
graph.n=281904 graph.m=2312497 
queries.size()=2000 
updates.size()=2000 
config.delta=3.54731e-06 
config.pfail=3.54731e-06 
config.rmax=9.82503e-08 
config.omega=3.7331e+07 
i=0 
std::max(1=11 
errorlimit*epsrate=0.000195102 
count=0 
graph.gr[u].size()=4 
i=1 
i=2 
i=3 
std::max(1=6 
errorlimit*epsrate=0.000106419 
count=0 
graph.gr[u].size()=3 
i=4 
i=5 
i=6 
i=7 
std::max(1=3 
errorlimit*epsrate=5.32096e-05 
count=0 
graph.gr[u].size()=5 
i=8 
std::max(1=5 
errorlimit*epsrate=8.86827e-05 
count=0 
graph.gr[u].size()=1 
i=9 
i=10 
i=11 
std::max(1=8 
errorlimit*epsrate=0.000141892 
count=0 
graph.gr[u].size()=2 
i=12 
std::max(1=3 
errorlimit*epsrate=5.32096e-05 
count=0 
graph.gr[u].size()=1 
i=13 
std::max(1=10 
errorlimit*epsrate=0.000177365 
count=0 
graph.gr[u].size()=2 
i=14 
std::max(1=4 
errorlimit*epsrate=7.09461e-05 
count=0 
graph.gr[u].size()=4 
i=15 
i=16 
i=17 
std::max(1=3 
errorlimit*epsrate=5.32096e-05 
count=0 
graph.gr[u].size()=3 
i=18 
std::max(1=6 
errorlimit*epsrate=0.000106419 
count=0 
graph.gr[u].size()=4 
i=19 
i=20 
std::max(1=5 
errorlimit*epsrate=8.86827e-05 
count=0 
graph.gr[u].size()=3 
i=21 
std::max(1=7 
errorlimit*epsrate=0.000124156 
count=0 
graph.gr[u].size()=2 
i=22 
std::max(1=17 
errorlimit*epsrate=0.000301521 
count=0 
graph.gr[u].size()=12 
i=23 
std::max(1=1 
errorlimit*epsrate=1.77365e-05 
count=0 
graph.gr[u].size()=1 
i=24 
std::max(1=7 
errorlimit*epsrate=0.000124156 
count=0 
graph.gr[u].size()=1 
i=25 
std::max(1=1 
errorlimit*epsrate=1.77365e-05 
count=0 
graph.gr[u].size()=1 
i=26 
std::max(1=10 
errorlimit*epsrate=0.000177365 
count=0 
graph.gr[u].size()=15 
i=27 
std::max(1=4 
errorlimit*epsrate=7.09461e-05 
count=0 
graph.gr[u].size()=3 
i=28 
std::max(1=5 
errorlimit*epsrate=8.86827e-05 
count=0 
graph.gr[u].size()=1 
i=29 
i=30 
i=31 
i=32 
i=33 
std::max(1=36 
errorlimit*epsrate=0.000638515 
count=0 
graph.gr[u].size()=2 
i=34 
i=35 
std::max(1=3 
errorlimit*epsrate=5.32096e-05 
count=0 
graph.gr[u].size()=4 
i=36 
i=37 
std::max(1=2 
errorlimit*epsrate=3.54731e-05 
count=0 
graph.gr[u].size()=2 
i=38 
std::max(1=7 
errorlimit*epsrate=0.000124156 
count=0 
graph.gr[u].size()=2 
i=39 
std::max(1=2 
errorlimit*epsrate=3.54731e-05 
count=0 
graph.gr[u].size()=0 
i=40 
i=41 
i=42 
i=43 
std::max(1=1 
errorlimit*epsrate=1.77365e-05 
count=0 
graph.gr[u].size()=2 
i=44 
std::max(1=50 
errorlimit*epsrate=0.000886827 
count=0 
graph.gr[u].size()=49 
i=45 
std::max(1=2 
errorlimit*epsrate=3.54731e-05 
count=0 
graph.gr[u].size()=0 
i=46 
i=47 
std::max(1=2 
errorlimit*epsrate=3.54731e-05 
count=0 
graph.gr[u].size()=3 
i=48 
i=49 
i=50 
i=51 
i=52 
std::max(1=2 
errorlimit*epsrate=3.54731e-05 
count=0 
graph.gr[u].size()=2 
i=53 
i=54 
std::max(1=4 
errorlimit*epsrate=7.09461e-05 
count=0 
graph.gr[u].size()=2 
i=55 
std::max(1=4 
errorlimit*epsrate=7.09461e-05 
count=0 
graph.gr[u].size()=1 
i=56 
std::max(1=4 
errorlimit*epsrate=7.09461e-05 
count=0 
graph.gr[u].size()=4 
i=57 
std::max(1=4 
errorlimit*epsrate=7.09461e-05 
count=0 
graph.gr[u].size()=5 
i=58 
std::max(1=1 
errorlimit*epsrate=1.77365e-05 
count=0 
graph.gr[u].size()=1 
i=59 
i=60 
std::max(1=3 
errorlimit*epsrate=5.32096e-05 
count=0 
graph.gr[u].size()=1 
i=61 
i=62 
std::max(1=1 
errorlimit*epsrate=1.77365e-05 
count=0 
graph.gr[u].size()=0 
i=63 
i=64 
i=65 
std::max(1=3 
errorlimit*epsrate=5.32096e-05 
count=0 
graph.gr[u].size()=3 
i=66 
std::max(1=3 
errorlimit*epsrate=5.32096e-05 
count=0 
graph.gr[u].size()=2 
i=67 
std::max(1=2 
errorlimit*epsrate=3.54731e-05 
count=0 
graph.gr[u].size()=1 
i=68 
std::max(1=4 
errorlimit*epsrate=7.09461e-05 
count=0 
graph.gr[u].size()=3 
i=69 
std::max(1=3 
errorlimit*epsrate=5.32096e-05 
count=0 
graph.gr[u].size()=1 
i=70 
std::max(1=2 
errorlimit*epsrate=3.54731e-05 
count=0 
graph.gr[u].size()=2 
i=71 
std::max(1=5 
errorlimit*epsrate=8.86827e-05 
count=0 
graph.gr[u].size()=1 
i=72 
std::max(1=2 
errorlimit*epsrate=3.54731e-05 
count=0 
graph.gr[u].size()=3 
i=73 
std::max(1=2 
errorlimit*epsrate=3.54731e-05 
count=0 
graph.gr[u].size()=3 
i=74 
i=75 
std::max(1=3 
errorlimit*epsrate=5.32096e-05 
count=0 
graph.gr[u].size()=2 
i=76 
std::max(1=20 
errorlimit*epsrate=0.000354731 
count=0 
graph.gr[u].size()=23 
i=77 
std::max(1=4 
errorlimit*epsrate=7.09461e-05 
count=0 
graph.gr[u].size()=3 
i=78 
std::max(1=33 
errorlimit*epsrate=0.000585306 
count=0 
graph.gr[u].size()=2 
i=79 
i=80 
i=81 
std::max(1=5 
errorlimit*epsrate=8.86827e-05 
count=0 
graph.gr[u].size()=2 
i=82 
std::max(1=4 
errorlimit*epsrate=7.09461e-05 
count=0 
graph.gr[u].size()=4 
i=83 
std::max(1=2 
errorlimit*epsrate=3.54731e-05 
count=0 
graph.gr[u].size()=3 
i=84 
std::max(1=10 
errorlimit*epsrate=0.000177365 
count=0 
graph.gr[u].size()=15 
i=85 
std::max(1=4 
errorlimit*epsrate=7.09461e-05 
count=0 
graph.gr[u].size()=2 
i=86 
i=87 
std::max(1=4 
errorlimit*epsrate=7.09461e-05 
count=0 
graph.gr[u].size()=2 
i=88 
std::max(1=1 
errorlimit*epsrate=1.77365e-05 
count=0 
graph.gr[u].size()=4 
i=89 
i=90 
i=91 
i=92 
std::max(1=5 
errorlimit*epsrate=8.86827e-05 
count=0 
graph.gr[u].size()=5 
i=93 
std::max(1=5 
errorlimit*epsrate=8.86827e-05 
count=0 
graph.gr[u].size()=2 
i=94 
i=95 
std::max(1=3 
errorlimit*epsrate=5.32096e-05 
count=0 
graph.gr[u].size()=3 
i=96 
i=97 
std::max(1=17 
errorlimit*epsrate=0.000301521 
count=0 
graph.gr[u].size()=4 
i=98 
i=99 
trw:8717509
hrw:8717479
### Timer 
t=   0  0.510781  
t=   3  0.395973  
t=   5  0.290587  
t=   6  0.097803  
t=  11  0.087277  
t=  12  0.000604  
t=  13  0.025887  
config.beta=1 
